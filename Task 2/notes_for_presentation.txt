# Task 2 - Schema-Matching:

~ Slide 1 - Problem definition:
	* Creating source descriptions requires schema mapping to refer tables and their attributes between mediated schema and datasources
	* Using of semantic matches for elaboration inteo schema mapping
	* Three types of matches
		- One-to-one matches	e. g. BEISPIEL AUS PROJEKT EINFÜGEN
		- One-to-many matches	e. g. BEISPIEL AUS PROJEKT EINFÜGEN
		- Many-to-many matches	no example in our scenario
	* Challenge of reconciling heterogenities with good accuracy and high scalability
~ Slide 2 - Edit-Distance-Matcher:
	* Sequence-based matcher which compares two strings to find pairs which refer the same real-world-entity
	* Computing minimal cost for transformation of string x to string y by the function d(x,y) as distance between two strings
		- Transformations are deleting, inserting and substituting of single characters
		- Equal costs of 1 for every operation of transformation
		- Smaller values for higher similarity
	* Example:
		- x = "orderNumber" (from mediated schema) and y = "orderCode" (from Source 1)
		- d(x,y) = 6
	* Converting distance measure into similarity measure by using the following equation:
		- s(x,y) = 1 - d(x,y) / [max(length(x), length(y))]
	* Example:
		- s(x,y) = 1 - 6 / 11 = 0.54545454545
~ Slide 3 - Jaro-Matcher:
	* Sequence-based matcher which finds commen characters and their position in both strings
	* Common characters whitout same position marked as transposition
	* Computing of similarity measure by using the following equation:
		- jaro(x,y) = 1 / 3[c/|x| + c/|y| + (c – t/2)/c]
		- c as total number of common characters and t as total number of transpositions
	* Example:
		- x and y same as in previous slide 
		- c = 6 and t = 1
		- jaro(x,y) = 1 / 3 * (6 / 11 + 6 / 9 + (6 - 1 / 2) / 6) = 0.7095959595959596
~ Slide 4 - Jaccard-Matcher:
	* Set-based matcher which tokenize strings in a set of tokens
	* B_x as set of generated tokens for x
	* B_y as set of generated tokens for y
	* Computing of similarity measure by using the following equation:
		- J(x,y) = |B_x \cap B_y| / |B_x \cup B_y|
	* Example:
		- B_x = {#o, or, rd, de, er, rN, Nu, um, mb, be, r#}
		- B_y = {#o, or, rd, de, er, rC, Co, od, e#}
		- J(x,y) = 5 / 15 = 0.3333333333333333
~ Slide 5 - Combining match predictions:
	* Simplest form of combining via returning average, minimum or maximum of scores from each matcher
	* Example:
		- Given the measures of all three matchers for x and y
			# s(x,y) = 0.54545454545
			# jaro(x,y) = 0.7095959595959596
			# J(x,y) = 0.3333333333333333
		- Combining via minimum combination strategy will output 0.3333333333333333
		- Combining via maximum combination strategy will output 0.7095959595959596
		- Combining via average combination strategy will output 0.5294612794586532
~ Slide 6 - Match selection by tresholding:
	* Tresholding as simplest strategy to choose matches
	* All pairs with score not less than tresholds are matches
	* Exmaple:
		- Using treshold 0.3 will output (x,y) as match for all combining strategies
		- Using treshold 0.5 will output (x,y) as match for average and maximum combining strategies
		- Using treshold 0.3 will output (x,y) as match only for maximum combining strategy
~ Slide 7 - Evaluation of semantic matching
	* Applying all three combination strategies with tresholds 0.3, 0.5 and 0.7 results in 9 different match-results
	* Comparing of this results with manually created solution pattern
	* Defining of true positive (TP), false positive (FP), true negative (TN) and false negative (FN) matches for each result
		- Matches of attribute pairs in both pattern as true positive und missmatches in both aus true negative
		- Matches in solution pattern and missmatch in selection result as false negative
		- Mismatches in solution paatern and match in selection result as false positive
	* Computing precision by using the following equation:
		- precision = TP / (TP + FP)
	* Computing recall by using the following equation:
		- recall = TP / (TP + FN)
~ Slide 8 - Results:
					TP		TN		FN		FP		Recall				Precision
Min-Comb. with treshold 0.3		9		453		27		85		0.09574468085106383		0.25
Min-Comb. with treshold 0.5		4		470		32		68		0.05555555555555555		0.1111111111111111
Min-Comb. with treshold 0.7		0		538		36		0		0						0.0
Max-Comb. with treshold 0.3		36		0		0		538		0.0627177700348432		1.0
Max-Comb. with treshold 0.5		36		0		0		538		0.0627177700348432		1.0
Max-Comb. with treshold 0.7		32		24		4		514		0.05860805860805861		0.8888888888888888
Avg-Comb. with treshold 0.3		36		4		0		534		0.06315789473684211		1.0
Avg-Comb. with treshold 0.5		21		393		15		145		0.12650602409638553		0.5833333333333334
Avg-Comb. with treshold 0.7		0		538		36		0		0						0.0

~ Problem definition:
	* Requirement of schema mapping to referring tables and elements between our mediated schema and our two datasources for source descriptions
	* Begin by computing of semantic matches to elaborate this matches into mappings
	* Existence of One-to-One-, One-to-Many- and Many-to-Many-Matches
		+++ showing examples of our scenario +++
	* Challenge to reconciling heterogenities with good accuracy and scalability
	* We will focus on 1-to-1-Matches by applying string matchers like Edit-Distance-, Jaro- and Jaccard-Measures
		# combining by Minimum, Maximum and Average and selecting by different tresholds (0.3, 0.5, 0.7) to measure the accuracy of our algorithms
~ Applying Matchers:
	* Edit-Distance as sequence-based matcher
	* Goal of sequence-based matcher is to comparing two strings to find pairs which refer the same real-world-entity
	* Computing minimal cost of transforming x into y with function d(x,y)
		# each transformation costs 1 (delete, insert and substitute of characters)
		# distance measure with smaller values for higher similarity
		+++ Two examples of our project +++
	* Converting from distance measure to similarity measure by applying following computation
		# measure in range from [0,1] with higher values for higher similarity
		+++ showing extension of example +++
	* Jaro-Measure also as sequence-based matcher
		# finding common characters and their positions
		# common characters without same position marked as transposition
		# computing with following equation
		+++ showing on example +++
	* Jaccard-Measure as set-based matcher
		# tokenization of strings via set-based-matcher
		+++ generation of tokens with one example +++
		# applying following equation for computation of the measure
		+++ computation of example +++
~ Combining techniques:
	* Simplest form of combining via returning average, minimum or maximum of scores from each matcher
		+++ slide 1: part of similarity results from measures +++
		+++ slide 2: combining them via one techniques +++
~ Match Selection:
	* tresholding as simplest strategy to choose matches
	* all pairs with score not less than tresholds are matches
		+++ showing some results +++
~ Evaluation of results:
	* Creating right solution as pattern for comparing with selection results
	* Defining matches of attribute pairs in both pattern as true positive und missmatches in both aus true negative
	* Matches in solution pattern and missmatch in selection result as false negative
	* Mismachtes in solution paatern and match in selection result as false positive
		+++ showing all statistics +++
	* For better expressiveness computation of recall and precision with following equations
	* Recall is ...
	* Precision is ...
		+++ showing recall + precision statistics +++
	* Showing some observation
		- More input when slides are ready -


Table S1.StoneOvenPizza(SOPID, PizzaName, nurishment, total) with tuples x and table S2.Pizza(PID, title, nurishment, price) with tuples y
mediated as Pizza(PID, pizzaName, nutrition, price)

sim(x,y) = 0.5 * s_{PID}(x,y) + 0.2 * s_{pizzaName}(x,y) + 0.1 * s_{nutrition}(x,y) + 0.2 * s_{price}(x,y)